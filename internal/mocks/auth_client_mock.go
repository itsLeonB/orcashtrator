// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/auth/auth_grpc_client.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/auth/auth_grpc_client.go -destination=internal/mocks/auth_clclient_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/itsLeonB/orcashtrator/internal/domain/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
	isgomock struct{}
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// GetOAuth2URL mocks base method.
func (m *MockAuthClient) GetOAuth2URL(ctx context.Context, provider, state string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuth2URL", ctx, provider, state)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuth2URL indicates an expected call of GetOAuth2URL.
func (mr *MockAuthClientMockRecorder) GetOAuth2URL(ctx, provider, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuth2URL", reflect.TypeOf((*MockAuthClient)(nil).GetOAuth2URL), ctx, provider, state)
}

// InternalLogin mocks base method.
func (m *MockAuthClient) InternalLogin(ctx context.Context, req auth.InternalLoginRequest) (auth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalLogin", ctx, req)
	ret0, _ := ret[0].(auth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalLogin indicates an expected call of InternalLogin.
func (mr *MockAuthClientMockRecorder) InternalLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalLogin", reflect.TypeOf((*MockAuthClient)(nil).InternalLogin), ctx, req)
}

// OAuth2Login mocks base method.
func (m *MockAuthClient) OAuth2Login(ctx context.Context, req auth.OAuthLoginRequest) (auth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth2Login", ctx, req)
	ret0, _ := ret[0].(auth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuth2Login indicates an expected call of OAuth2Login.
func (mr *MockAuthClientMockRecorder) OAuth2Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth2Login", reflect.TypeOf((*MockAuthClient)(nil).OAuth2Login), ctx, req)
}

// Register mocks base method.
func (m *MockAuthClient) Register(ctx context.Context, req auth.RegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthClientMockRecorder) Register(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthClient)(nil).Register), ctx, req)
}

// VerifyToken mocks base method.
func (m *MockAuthClient) VerifyToken(ctx context.Context, token string) (bool, map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(map[string]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthClientMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthClient)(nil).VerifyToken), ctx, token)
}
